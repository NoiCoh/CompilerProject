/*************/
/* Based on a template by Oren Ish-Shalom */
/*************/


/*************/
/* IMPORTS */
/*************/

import java_cup.runtime.*;
import ast.*;
import java.util.List;
import java.io.*;
import java.util.LinkedList;

parser code
{:
	public Lexer lexer;

	public Parser(Lexer lexer)
	{
		super(lexer);
		this.lexer = lexer;
	}

	// Override default error reporting in parser
	public void report_error(String message, Object info)
	{
	    System.err.print("Syntax error at line " + lexer.getLine() + " of input. Parser\n");
		System.exit(1);
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	Symbol s;
    try {
	s = lexer.next_token();
	System.out.print(s.sym);
	System.out.print("[");
	System.out.print(lexer.getLine());
	System.out.print(":");
	System.out.print(lexer.getCharPos());
	System.out.print("] ");
	System.out.print(sym.terminalNames[s.sym]);
	if (s.value != null)
	{
		System.out.print("( ");
		System.out.print(s.value);
		System.out.print(" )");
	}
	System.out.print("\n");
	return s;
     } catch (java.lang.Error e) {
         System.err.print("Syntax error at line " + lexer.getLine() + " of input. Lexer\n");
         System.exit(1);
         return null;
     }
:};

/*************/
/* TERMINALS */
/*************/
terminal PUBLIC; 
terminal COMMA;
terminal PLUS;
terminal MINUS;
terminal MULT;
terminal LPAREN;
terminal RPAREN;
terminal LSBRACK;
terminal RSBRACK;
terminal LCBRACK;
terminal RCBRACK;
terminal SEMICOLON;
terminal DOT;
terminal EQUAL;
terminal LT;
terminal CLASS;
terminal EXTENDS;
terminal RETURN;
terminal WHILE;
terminal IF;
terminal ELSE;
terminal STRARRAY;
terminal VOID;
terminal STATIC;
terminal MAIN;
terminal String ID;
terminal Integer NUMBER;
terminal INT;
terminal BOOL;
terminal INTARRAY;
terminal NOT; 
terminal AND2; 
terminal LEN; 
terminal TRUE;
terminal FALSE;
terminal THIS;
terminal NEW;
terminal SYSOUT;

/*****************/
/* NON TERMINALS */
/*****************/
non terminal prog;
non terminal LinkedList<ClassDecl> list_ClassDecls;
non terminal MainClass MainClass;
non terminal ClassDecl classDecl;

non terminal LinkedList<VarDecl> list_vars;
non terminal AstType declType;
non terminal VarDecl varDecl;
non terminal LinkedList<MethodDecl> list_methods;
non terminal MethodDecl methodDecl;

non terminal LinkedList<FormalArg> list_formals;
non terminal FormalArg formal;
non terminal LinkedList<Statement> list_stmts;
non terminal Statement Stmt;
non terminal Expr expr;
non terminal LinkedList<Expr> list_methodActuals;


/***********************/
/* OPERATOR PRECEDENCE */
/***********************/
precedence nonassoc EQUAL;
precedence nonassoc LT;
precedence left     PLUS;
precedence left     MINUS;
precedence left     MULT;
precedence left     AND2;
precedence left     NOT;
precedence nonassoc LSBRACK;
precedence nonassoc RSBRACK;
precedence nonassoc LPAREN;
precedence nonassoc RPAREN;
precedence left     DOT;

/************************/
/* INITIAL NON TERMINAL */
/************************/
start with prog;

/********************/
/* PRODUCTION RULES */
/********************/

prog ::= MainClass:main_class list_ClassDecls:list_class_decls  {: RESULT = new Program(main_class, list_class_decls); :};

MainClass  ::= CLASS ID:id LCBRACK PUBLIC STATIC VOID MAIN LPAREN STRARRAY ID:args RPAREN LCBRACK Stmt:main_st RCBRACK RCBRACK {: RESULT = new MainClass(id, args, main_st); :};

classDecl ::= CLASS ID:id LCBRACK list_vars:v list_methods:m RCBRACK                  {: RESULT = new ClassDecl(id,null,v,m); :} 
           |  CLASS ID:id1 EXTENDS ID:id2 LCBRACK list_vars:v list_methods:m RCBRACK  {: RESULT = new ClassDecl(id1, id2, v,m); :};          

varDecl   ::= declType:t ID:id SEMICOLON {: RESULT = new VarDecl(t, id, lexer.getLine()); :} ; 

methodDecl ::= PUBLIC declType:ret_type ID:name LPAREN list_formals:formals RPAREN LCBRACK list_vars:vars list_stmts:stmts RETURN expr:ret SEMICOLON RCBRACK            {: RESULT = new MethodDecl(ret_type, name,formals,vars,stmts,ret,lexer.getLine() ); :} /* without formals */
            |  PUBLIC declType:ret_type ID:name LPAREN formal:f list_formals:formals RPAREN LCBRACK list_vars:vars list_stmts:stmts RETURN expr:ret SEMICOLON RCBRACK   {: formals.addFirst(f); RESULT = new MethodDecl(ret_type, name, formals,vars,stmts,ret,lexer.getLine()); :} /* with formals */;
            
list_formals  ::= COMMA formal:f list_formals:formals  {: formals.addFirst(f); RESULT = formals; :}
               |     /* empty */                       {: RESULT = new LinkedList<FormalArg>(); :};
               
formal        ::= declType:t ID:id      {: RESULT = new FormalArg(t, id, lexer.getLine()); :} ;

declType  ::= INT      {: RESULT = new IntAstType(); :}
	       |  BOOL     {: RESULT = new BoolAstType(); :}
	       |  INTARRAY {: RESULT = new IntArrayAstType(); :}
	       |  ID:ref   {: RESULT = new RefType(ref); :} ;
	      
Stmt     ::= ID:lv EQUAL expr:rv SEMICOLON                      {: RESULT = new AssignStatement(lv,rv); :}
  				| ID:lv LSBRACK expr:i RSBRACK EQUAL expr:rv SEMICOLON {: RESULT = new AssignArrayStatement(lv, i, rv); :} 
  				| LCBRACK list_vars:vars list_stmts:stmts RCBRACK      {: RESULT = new BlockStatement(stmts); :}
                | IF LPAREN expr:cond RPAREN Stmt:then ELSE Stmt:els   {: RESULT = new IfStatement(cond, then, els); :}
                | WHILE LPAREN expr:cond RPAREN Stmt:s                 {: RESULT = new WhileStatement(cond, s); :}
                | SYSOUT LPAREN expr:e RPAREN SEMICOLON                {: RESULT = new SysoutStatement(e); :};              

expr 	::= expr:e1 PLUS expr:e2 		{: RESULT = new AddExpr(e1, e2); :}
         | expr:e1 MINUS expr:e2		{: RESULT = new SubtractExpr(e1, e2); :}
         | expr:e1 MULT expr:e2			{: RESULT = new MultExpr(e1, e2); :}
         | expr:e1 LT expr:e2       	{: RESULT = new LtExpr(e1, e2); :}
         | expr:e1 AND2 expr:e2    		{: RESULT = new AndExpr(e1, e2); :}
         | expr:arr LSBRACK expr:i RSBRACK   {: RESULT = new ArrayAccessExpr(arr, i); :}
         | expr:arr DOT LEN                  {: RESULT = new ArrayLengthExpr(arr); :}
         | expr:owner DOT ID:id LPAREN expr:actual list_methodActuals:actuals RPAREN   {: actuals.addFirst(actual); RESULT = new MethodCallExpr(owner, id, actuals); :}
         | expr:owner DOT ID:id LPAREN list_methodActuals:actuals RPAREN   			   {:  RESULT = new MethodCallExpr(owner, id, actuals); :}
         | NUMBER:n					{: RESULT = new IntegerLiteralExpr(n.intValue()); :}
         | TRUE                                  {: RESULT = new TrueExpr(); :}
	     | FALSE 							     {: RESULT = new FalseExpr(); :}
	     | ID:id                                 {: RESULT = new IdentifierExpr(id); :}
	     | THIS                                  {: RESULT = new ThisExpr(); :}
         | NEW INT LSBRACK expr:e RSBRACK        {: RESULT = new NewIntArrayExpr(e); :}
         | NEW ID:id LPAREN RPAREN               {: RESULT = new NewObjectExpr(id); :}
         | NOT expr:e               			 {: RESULT = new NotExpr(e); :}
         | LPAREN expr:e RPAREN					 {: RESULT = e; :};
	        
list_methodActuals  ::= COMMA expr:e list_methodActuals:actuals   {: actuals.addFirst(e); RESULT = actuals; :}
					| /* empty */                                 {: RESULT = new LinkedList<Expr>(); :};

list_ClassDecls  ::= list_ClassDecls:list_class_decls classDecl:c  {: list_class_decls.add(c); RESULT = list_class_decls; :}
 			      |      /* empty */                               {: RESULT = new LinkedList<ClassDecl>(); :};

list_methods ::=  list_methods:methods methodDecl:m  {: methods.add(m); RESULT = methods; :}
		      | /* empty */           	            {: RESULT = new LinkedList<MethodDecl>(); :} ;	 

list_vars ::= list_vars:vars varDecl:v  {: vars.add(v); RESULT = vars; :}
		  		| /* empty */                {: RESULT = new LinkedList<VarDecl>(); :} ;

list_stmts ::=  Stmt:s list_stmts:stmts       {:  stmts.addFirst(s); RESULT = stmts;  :}
               |     /* empty */              {: RESULT = new LinkedList<Statement>(); :};
                
