
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import ast.*;
import java.util.List;
import java.io.*;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\061\000\002\002\004\000\002\002\004\000\002\004" +
    "\023\000\002\005\010\000\002\005\012\000\002\010\005" +
    "\000\002\012\016\000\002\012\020\000\002\013\005\000" +
    "\002\013\002\000\002\014\004\000\002\007\003\000\002" +
    "\007\003\000\002\007\005\000\002\007\003\000\002\016" +
    "\006\000\002\016\011\000\002\016\005\000\002\016\011" +
    "\000\002\016\007\000\002\016\007\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\006\000\002\017\005\000\002\017" +
    "\011\000\002\017\007\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\007\000\002\017\006\000\002\017\004\000\002" +
    "\017\005\000\002\020\005\000\002\020\002\000\002\003" +
    "\004\000\002\003\002\000\002\011\004\000\002\011\002" +
    "\000\002\006\004\000\002\006\002\000\002\015\004\000" +
    "\002\015\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\004\023\005\001\002\000\006\002\uffd7\023" +
    "\uffd7\001\002\000\004\035\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\004\015\011\001" +
    "\002\000\004\004\012\001\002\000\004\033\013\001\002" +
    "\000\004\032\014\001\002\000\004\034\015\001\002\000" +
    "\004\011\016\001\002\000\004\031\017\001\002\000\004" +
    "\013\020\001\002\000\004\014\021\001\002\000\004\035" +
    "\022\001\002\000\004\012\023\001\002\000\004\015\024" +
    "\001\002\000\014\015\031\026\030\027\032\035\025\050" +
    "\027\001\002\000\006\013\131\021\132\001\002\000\004" +
    "\016\127\001\002\000\004\011\123\001\002\000\004\011" +
    "\117\001\002\000\016\015\031\016\uffd1\026\030\027\032" +
    "\035\025\050\027\001\002\000\004\011\033\001\002\000" +
    "\022\011\044\035\040\036\035\041\042\044\036\045\037" +
    "\046\041\047\034\001\002\000\006\035\104\037\105\001" +
    "\002\000\030\005\uffe3\006\uffe3\007\uffe3\010\uffe3\012\uffe3" +
    "\013\uffe3\014\uffe3\017\uffe3\020\uffe3\022\uffe3\042\uffe3\001" +
    "\002\000\030\005\uffe2\006\uffe2\007\uffe2\010\uffe2\012\uffe2" +
    "\013\uffe2\014\uffe2\017\uffe2\020\uffe2\022\uffe2\042\uffe2\001" +
    "\002\000\030\005\uffe1\006\uffe1\007\uffe1\010\uffe1\012\uffe1" +
    "\013\uffe1\014\uffe1\017\uffe1\020\uffe1\022\uffe1\042\uffe1\001" +
    "\002\000\030\005\uffe0\006\uffe0\007\uffe0\010\uffe0\012\uffe0" +
    "\013\uffe0\014\uffe0\017\uffe0\020\uffe0\022\uffe0\042\uffe0\001" +
    "\002\000\030\005\uffdf\006\uffdf\007\uffdf\010\uffdf\012\uffdf" +
    "\013\uffdf\014\uffdf\017\uffdf\020\uffdf\022\uffdf\042\uffdf\001" +
    "\002\000\022\011\044\035\040\036\035\041\042\044\036" +
    "\045\037\046\041\047\034\001\002\000\022\006\052\007" +
    "\053\010\047\012\077\013\051\020\055\022\046\042\054" +
    "\001\002\000\022\011\044\035\040\036\035\041\042\044" +
    "\036\045\037\046\041\047\034\001\002\000\022\006\052" +
    "\007\053\010\047\012\050\013\051\020\055\022\046\042" +
    "\054\001\002\000\022\011\044\035\040\036\035\041\042" +
    "\044\036\045\037\046\041\047\034\001\002\000\022\011" +
    "\044\035\040\036\035\041\042\044\036\045\037\046\041" +
    "\047\034\001\002\000\030\005\uffdb\006\uffdb\007\uffdb\010" +
    "\uffdb\012\uffdb\013\uffdb\014\uffdb\017\uffdb\020\uffdb\022\uffdb" +
    "\042\uffdb\001\002\000\022\011\044\035\040\036\035\041" +
    "\042\044\036\045\037\046\041\047\034\001\002\000\022" +
    "\011\044\035\040\036\035\041\042\044\036\045\037\046" +
    "\041\047\034\001\002\000\022\011\044\035\040\036\035" +
    "\041\042\044\036\045\037\046\041\047\034\001\002\000" +
    "\022\011\044\035\040\036\035\041\042\044\036\045\037" +
    "\046\041\047\034\001\002\000\006\035\056\043\057\001" +
    "\002\000\004\011\060\001\002\000\030\005\uffe6\006\uffe6" +
    "\007\uffe6\010\uffe6\012\uffe6\013\uffe6\014\uffe6\017\uffe6\020" +
    "\uffe6\022\uffe6\042\uffe6\001\002\000\024\011\044\012\061" +
    "\035\040\036\035\041\042\044\036\045\037\046\041\047" +
    "\034\001\002\000\030\005\uffe4\006\uffe4\007\uffe4\010\uffe4" +
    "\012\uffe4\013\uffe4\014\uffe4\017\uffe4\020\uffe4\022\uffe4\042" +
    "\uffe4\001\002\000\024\005\063\006\052\007\053\010\047" +
    "\012\uffd9\013\051\020\055\022\046\042\054\001\002\000" +
    "\022\011\044\035\040\036\035\041\042\044\036\045\037" +
    "\046\041\047\034\001\002\000\004\012\065\001\002\000" +
    "\030\005\uffe5\006\uffe5\007\uffe5\010\uffe5\012\uffe5\013\uffe5" +
    "\014\uffe5\017\uffe5\020\uffe5\022\uffe5\042\uffe5\001\002\000" +
    "\024\005\063\006\052\007\053\010\047\012\uffd9\013\051" +
    "\020\055\022\046\042\054\001\002\000\004\012\uffda\001" +
    "\002\000\030\005\uffe8\006\052\007\053\010\047\012\uffe8" +
    "\013\051\014\uffe8\017\uffe8\020\055\022\046\042\uffe8\001" +
    "\002\000\030\005\uffeb\006\uffeb\007\uffeb\010\047\012\uffeb" +
    "\013\051\014\uffeb\017\uffeb\020\055\022\uffeb\042\uffeb\001" +
    "\002\000\030\005\uffec\006\uffec\007\uffec\010\047\012\uffec" +
    "\013\051\014\uffec\017\uffec\020\055\022\uffec\042\uffec\001" +
    "\002\000\022\006\052\007\053\010\047\013\051\014\074" +
    "\020\055\022\046\042\054\001\002\000\030\005\uffe7\006" +
    "\uffe7\007\uffe7\010\uffe7\012\uffe7\013\uffe7\014\uffe7\017\uffe7" +
    "\020\uffe7\022\uffe7\042\uffe7\001\002\000\030\005\uffea\006" +
    "\uffea\007\uffea\010\uffea\012\uffea\013\051\014\uffea\017\uffea" +
    "\020\055\022\uffea\042\uffea\001\002\000\030\005\uffe9\006" +
    "\052\007\053\010\047\012\uffe9\013\051\014\uffe9\017\uffe9" +
    "\020\055\022\uffe9\042\uffe9\001\002\000\014\015\031\026" +
    "\030\027\032\035\025\050\027\001\002\000\004\030\101" +
    "\001\002\000\014\015\031\026\030\027\032\035\025\050" +
    "\027\001\002\000\022\015\uffef\016\uffef\025\uffef\026\uffef" +
    "\027\uffef\030\uffef\035\uffef\050\uffef\001\002\000\030\005" +
    "\uffdc\006\uffdc\007\uffdc\010\uffdc\012\uffdc\013\051\014\uffdc" +
    "\017\uffdc\020\055\022\uffdc\042\uffdc\001\002\000\004\011" +
    "\111\001\002\000\004\013\106\001\002\000\022\011\044" +
    "\035\040\036\035\041\042\044\036\045\037\046\041\047" +
    "\034\001\002\000\022\006\052\007\053\010\047\013\051" +
    "\014\110\020\055\022\046\042\054\001\002\000\030\005" +
    "\uffde\006\uffde\007\uffde\010\uffde\012\uffde\013\uffde\014\uffde" +
    "\017\uffde\020\uffde\022\uffde\042\uffde\001\002\000\004\012" +
    "\112\001\002\000\030\005\uffdd\006\uffdd\007\uffdd\010\uffdd" +
    "\012\uffdd\013\uffdd\014\uffdd\017\uffdd\020\uffdd\022\uffdd\042" +
    "\uffdd\001\002\000\020\015\031\016\uffd1\025\uffd1\026\030" +
    "\027\032\035\025\050\027\001\002\000\004\016\115\001" +
    "\002\000\022\015\ufff0\016\ufff0\025\ufff0\026\ufff0\027\ufff0" +
    "\030\ufff0\035\ufff0\050\ufff0\001\002\000\006\016\uffd2\025" +
    "\uffd2\001\002\000\022\011\044\035\040\036\035\041\042" +
    "\044\036\045\037\046\041\047\034\001\002\000\022\006" +
    "\052\007\053\010\047\012\121\013\051\020\055\022\046" +
    "\042\054\001\002\000\014\015\031\026\030\027\032\035" +
    "\025\050\027\001\002\000\022\015\uffee\016\uffee\025\uffee" +
    "\026\uffee\027\uffee\030\uffee\035\uffee\050\uffee\001\002\000" +
    "\022\011\044\035\040\036\035\041\042\044\036\045\037" +
    "\046\041\047\034\001\002\000\022\006\052\007\053\010" +
    "\047\012\125\013\051\020\055\022\046\042\054\001\002" +
    "\000\004\017\126\001\002\000\022\015\uffed\016\uffed\025" +
    "\uffed\026\uffed\027\uffed\030\uffed\035\uffed\050\uffed\001\002" +
    "\000\004\016\130\001\002\000\006\002\uffff\023\uffff\001" +
    "\002\000\022\011\044\035\040\036\035\041\042\044\036" +
    "\045\037\046\041\047\034\001\002\000\022\011\044\035" +
    "\040\036\035\041\042\044\036\045\037\046\041\047\034" +
    "\001\002\000\022\006\052\007\053\010\047\013\051\017" +
    "\134\020\055\022\046\042\054\001\002\000\022\015\ufff2" +
    "\016\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\035\ufff2\050" +
    "\ufff2\001\002\000\022\006\052\007\053\010\047\013\051" +
    "\014\136\020\055\022\046\042\054\001\002\000\004\021" +
    "\137\001\002\000\022\011\044\035\040\036\035\041\042" +
    "\044\036\045\037\046\041\047\034\001\002\000\022\006" +
    "\052\007\053\010\047\013\051\017\141\020\055\022\046" +
    "\042\054\001\002\000\022\015\ufff1\016\ufff1\025\ufff1\026" +
    "\ufff1\027\ufff1\030\ufff1\035\ufff1\050\ufff1\001\002\000\006" +
    "\002\000\023\144\001\002\000\006\002\uffd8\023\uffd8\001" +
    "\002\000\004\035\145\001\002\000\006\015\147\024\146" +
    "\001\002\000\004\035\221\001\002\000\014\004\uffd3\016" +
    "\uffd3\035\uffd3\037\uffd3\040\uffd3\001\002\000\014\004\uffd5" +
    "\016\uffd5\035\151\037\156\040\153\001\002\000\004\035" +
    "\ufff3\001\002\000\006\004\165\016\164\001\002\000\004" +
    "\035\ufff5\001\002\000\026\004\uffd4\015\uffd4\016\uffd4\025" +
    "\uffd4\026\uffd4\027\uffd4\035\uffd4\037\uffd4\040\uffd4\050\uffd4" +
    "\001\002\000\004\035\161\001\002\000\006\013\157\035" +
    "\ufff6\001\002\000\004\014\160\001\002\000\004\035\ufff4" +
    "\001\002\000\004\017\162\001\002\000\026\004\ufffc\015" +
    "\ufffc\016\ufffc\025\ufffc\026\ufffc\027\ufffc\035\ufffc\037\ufffc" +
    "\040\ufffc\050\ufffc\001\002\000\006\004\uffd6\016\uffd6\001" +
    "\002\000\006\002\ufffe\023\ufffe\001\002\000\010\035\151" +
    "\037\156\040\153\001\002\000\004\035\167\001\002\000" +
    "\004\011\170\001\002\000\012\012\171\035\151\037\156" +
    "\040\153\001\002\000\004\015\212\001\002\000\006\005" +
    "\175\012\ufff8\001\002\000\004\035\174\001\002\000\006" +
    "\005\ufff7\012\ufff7\001\002\000\010\035\151\037\156\040" +
    "\153\001\002\000\004\012\177\001\002\000\004\015\200" +
    "\001\002\000\022\015\uffd3\025\uffd3\026\uffd3\027\uffd3\035" +
    "\uffd3\037\uffd3\040\uffd3\050\uffd3\001\002\000\022\015\031" +
    "\025\uffd1\026\030\027\032\035\203\037\156\040\153\050" +
    "\027\001\002\000\004\025\204\001\002\000\010\013\131" +
    "\021\132\035\ufff3\001\002\000\022\011\044\035\040\036" +
    "\035\041\042\044\036\045\037\046\041\047\034\001\002" +
    "\000\022\006\052\007\053\010\047\013\051\017\206\020" +
    "\055\022\046\042\054\001\002\000\004\016\207\001\002" +
    "\000\006\004\ufffa\016\ufffa\001\002\000\006\005\175\012" +
    "\ufff8\001\002\000\004\012\ufff9\001\002\000\022\015\uffd3" +
    "\025\uffd3\026\uffd3\027\uffd3\035\uffd3\037\uffd3\040\uffd3\050" +
    "\uffd3\001\002\000\022\015\031\025\uffd1\026\030\027\032" +
    "\035\203\037\156\040\153\050\027\001\002\000\004\025" +
    "\215\001\002\000\022\011\044\035\040\036\035\041\042" +
    "\044\036\045\037\046\041\047\034\001\002\000\022\006" +
    "\052\007\053\010\047\013\051\017\217\020\055\022\046" +
    "\042\054\001\002\000\004\016\220\001\002\000\006\004" +
    "\ufffb\016\ufffb\001\002\000\004\015\222\001\002\000\014" +
    "\004\uffd3\016\uffd3\035\uffd3\037\uffd3\040\uffd3\001\002\000" +
    "\014\004\uffd5\016\uffd5\035\151\037\156\040\153\001\002" +
    "\000\006\004\165\016\225\001\002\000\006\002\ufffd\023" +
    "\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\006\002\005\004\003\001\001\000\004\003" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\113\016\112" +
    "\001\001\000\002\001\001\000\004\017\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\102\001\001\000\002\001\001\000\004\017\044\001\001" +
    "\000\002\001\001\000\004\017\075\001\001\000\004\017" +
    "\074\001\001\000\002\001\001\000\004\017\072\001\001" +
    "\000\004\017\071\001\001\000\004\017\070\001\001\000" +
    "\004\017\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\061\001\001\000\002\001" +
    "\001\000\004\020\063\001\001\000\004\017\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\077\001\001" +
    "\000\002\001\001\000\004\016\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\115" +
    "\016\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\117\001\001\000\002\001\001" +
    "\000\004\016\121\001\001\000\002\001\001\000\004\017" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\134\001\001\000\004\017\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\142\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\147" +
    "\001\001\000\010\007\154\010\153\011\151\001\001\000" +
    "\002\001\001\000\004\012\162\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\165\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\172\014\171\001\001\000\002\001\001\000\004\013" +
    "\175\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\172\014\207\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\200\001\001\000\012\007\154\010\153" +
    "\015\201\016\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\204\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\210\001\001\000" +
    "\002\001\001\000\004\006\212\001\001\000\012\007\154" +
    "\010\153\015\213\016\112\001\001\000\002\001\001\000" +
    "\004\017\215\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\222\001" +
    "\001\000\010\007\154\010\153\011\223\001\001\000\004" +
    "\012\162\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s;
    try {
	s = lexer.next_token();
	//System.out.print(s.sym);
	//System.out.print("[");
	//System.out.print(lexer.getLine());
	//System.out.print(":");
	//System.out.print(lexer.getCharPos());
	//System.out.print("] ");
	//System.out.print(sym.terminalNames[s.sym]);
	//if (s.value != null)
	//{
	//	System.out.print("( ");
	//	System.out.print(s.value);
	//	System.out.print(" )");
	//}
	//System.out.print("\n");
	return s;
     } catch (java.lang.Error e) {
         System.err.print("Syntax error at line " + lexer.getLine() + " of input.\n");
         System.exit(1);
         return null;
     }

    }


	public Lexer lexer;

	public Parser(Lexer lexer)
	{
		super(lexer);
		this.lexer = lexer;
	}

	// Override default error reporting in parser
	public void report_error(String message, Object info)
	{
	    System.err.print("Syntax error at line " + lexer.getLine() + " of input.\n");
		System.exit(1);
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= MainClass list_ClassDecls 
            {
              Object RESULT =null;
		int main_classleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int main_classright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MainClass main_class = (MainClass)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int list_class_declsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int list_class_declsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<ClassDecl> list_class_decls = (LinkedList<ClassDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Program(main_class, list_class_decls); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MainClass ::= CLASS ID LCBRACK PUBLIC STATIC VOID MAIN LPAREN STR LSBRACK RSBRACK ID RPAREN LCBRACK Stmt RCBRACK RCBRACK 
            {
              MainClass RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-15)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String args = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int main_stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int main_stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement main_st = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new MainClass(id, args, main_st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MainClass",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // classDecl ::= CLASS ID LCBRACK list_vars list_methods RCBRACK 
            {
              ClassDecl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<VarDecl> v = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<MethodDecl> m = (LinkedList<MethodDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ClassDecl(id,null,v,m); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classDecl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // classDecl ::= CLASS ID EXTENDS ID LCBRACK list_vars list_methods RCBRACK 
            {
              ClassDecl RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<VarDecl> v = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<MethodDecl> m = (LinkedList<MethodDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ClassDecl(id1, id2, v,m); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classDecl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // varDecl ::= declType ID SEMICOLON 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AstType t = (AstType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VarDecl(t, id, lexer.getLine()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDecl",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // methodDecl ::= PUBLIC declType ID LPAREN RPAREN LCBRACK list_vars list_stmts RETURN expr SEMICOLON RCBRACK 
            {
              MethodDecl RESULT =null;
		int ret_typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int ret_typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		AstType ret_type = (AstType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		LinkedList<VarDecl> vars = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<Statement> stmts = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int retleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ret = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new MethodDecl(ret_type, name,new LinkedList<FormalArg>(),vars,stmts,ret,lexer.getLine() ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodDecl",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // methodDecl ::= PUBLIC declType ID LPAREN formal list_formals RPAREN LCBRACK list_vars list_stmts RETURN expr SEMICOLON RCBRACK 
            {
              MethodDecl RESULT =null;
		int ret_typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int ret_typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		AstType ret_type = (AstType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		FormalArg f = (FormalArg)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int formalsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int formalsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		LinkedList<FormalArg> formals = (LinkedList<FormalArg>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		LinkedList<VarDecl> vars = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<Statement> stmts = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int retleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ret = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 formals.addFirst(f); RESULT = new MethodDecl(ret_type, name, formals,vars,stmts,ret,lexer.getLine()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodDecl",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // list_formals ::= COMMA formal list_formals 
            {
              LinkedList<FormalArg> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FormalArg f = (FormalArg)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int formalsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int formalsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<FormalArg> formals = (LinkedList<FormalArg>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 formals.addFirst(f); RESULT = formals; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_formals",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // list_formals ::= 
            {
              LinkedList<FormalArg> RESULT =null;
		 RESULT = new LinkedList<FormalArg>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_formals",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // formal ::= declType ID 
            {
              FormalArg RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AstType t = (AstType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FormalArg(t, id, lexer.getLine()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declType ::= INT 
            {
              AstType RESULT =null;
		 RESULT = new IntAstType(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declType ::= BOOL 
            {
              AstType RESULT =null;
		 RESULT = new BoolAstType(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declType ::= INT LSBRACK RSBRACK 
            {
              AstType RESULT =null;
		 RESULT = new IntArrayAstType(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declType ::= ID 
            {
              AstType RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int refright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ref = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RefType(ref); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Stmt ::= ID EQUAL expr SEMICOLON 
            {
              Statement RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String lv = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr rv = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AssignStatement(lv,rv); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Stmt ::= ID LSBRACK expr RSBRACK EQUAL expr SEMICOLON 
            {
              Statement RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String lv = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr rv = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AssignArrayStatement(lv, i, rv); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Stmt ::= LCBRACK list_stmts RCBRACK 
            {
              Statement RESULT =null;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Statement> stmts = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new BlockStatement(stmts); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Stmt ::= IF LPAREN expr RPAREN Stmt ELSE Stmt 
            {
              Statement RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expr cond = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement then = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement els = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfStatement(cond, then, els); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Stmt ::= WHILE LPAREN expr RPAREN Stmt 
            {
              Statement RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr cond = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new WhileStatement(cond, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Stmt ::= SYSOUT LPAREN expr RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SysoutStatement(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= expr PLUS expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AddExpr(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= expr MINUS expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SubtractExpr(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= expr MULT expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MultExpr(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= expr LT expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LtExpr(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= expr AND2 expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AndExpr(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= expr LSBRACK expr RSBRACK 
            {
              Expr RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr arr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayAccessExpr(arr, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr DOT LEN 
            {
              Expr RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr arr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new ArrayLengthExpr(arr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= expr DOT ID LPAREN expr list_methodActuals RPAREN 
            {
              Expr RESULT =null;
		int ownerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int ownerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Expr owner = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int actualleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int actualright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr actual = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int actualsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int actualsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expr> actuals = (LinkedList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 actuals.addFirst(actual); RESULT = new MethodCallExpr(owner, id, actuals); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= expr DOT ID LPAREN RPAREN 
            {
              Expr RESULT =null;
		int ownerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int ownerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expr owner = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  RESULT = new MethodCallExpr(owner, id, new LinkedList<Expr>()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= NUMBER 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntegerLiteralExpr(n.intValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= TRUE 
            {
              Expr RESULT =null;
		 RESULT = new TrueExpr(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= FALSE 
            {
              Expr RESULT =null;
		 RESULT = new FalseExpr(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= ID 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IdentifierExpr(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= THIS 
            {
              Expr RESULT =null;
		 RESULT = new ThisExpr(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= NEW INT LSBRACK expr RSBRACK 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NewIntArrayExpr(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= NEW ID LPAREN RPAREN 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new NewObjectExpr(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= NOT expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NotExpr(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // list_methodActuals ::= COMMA expr list_methodActuals 
            {
              LinkedList<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int actualsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int actualsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Expr> actuals = (LinkedList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 actuals.addFirst(e); RESULT = actuals; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_methodActuals",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // list_methodActuals ::= 
            {
              LinkedList<Expr> RESULT =null;
		 RESULT = new LinkedList<Expr>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_methodActuals",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // list_ClassDecls ::= list_ClassDecls classDecl 
            {
              LinkedList<ClassDecl> RESULT =null;
		int list_class_declsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int list_class_declsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<ClassDecl> list_class_decls = (LinkedList<ClassDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ClassDecl c = (ClassDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 list_class_decls.add(c); RESULT = list_class_decls; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_ClassDecls",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // list_ClassDecls ::= 
            {
              LinkedList<ClassDecl> RESULT =null;
		 RESULT = new LinkedList<ClassDecl>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_ClassDecls",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // list_methods ::= list_methods methodDecl 
            {
              LinkedList<MethodDecl> RESULT =null;
		int methodsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int methodsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<MethodDecl> methods = (LinkedList<MethodDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		MethodDecl m = (MethodDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 methods.add(m); RESULT = methods; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_methods",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // list_methods ::= 
            {
              LinkedList<MethodDecl> RESULT =null;
		 RESULT = new LinkedList<MethodDecl>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_methods",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // list_vars ::= list_vars varDecl 
            {
              LinkedList<VarDecl> RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<VarDecl> vars = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VarDecl v = (VarDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 vars.add(v); RESULT = vars; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_vars",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // list_vars ::= 
            {
              LinkedList<VarDecl> RESULT =null;
		 RESULT = new LinkedList<VarDecl>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_vars",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // list_stmts ::= Stmt list_stmts 
            {
              LinkedList<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Statement> stmts = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  stmts.addFirst(s); RESULT = stmts;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // list_stmts ::= 
            {
              LinkedList<Statement> RESULT =null;
		 RESULT = new LinkedList<Statement>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
